generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  password     String
  role         Role           @default(STUDENT)
  createdAt    DateTime       @default(now())
  topics       Topic[]
  diaryEntries DiaryEntry[]
  goals        Goal[]
  chats        Chat[]
  studyProfile StudyProfile?
  quizProfile  QuizProfile?
}

model Goal {
  id        String   @id @default(cuid())
  title     String
  target    Int
  unit      String
  dueDate   DateTime
  progress  Int
  completed Boolean
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model DiaryEntry {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime @unique
  entry     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id        String     @id @default(uuid())
  title     String
  progress  Int        @default(0)
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  subtopics Subtopic[]
}

model Subtopic {
  id        String  @id @default(uuid())
  title     String
  completed Boolean @default(false)
  topic     Topic   @relation(fields: [topicId], references: [id])
  topicId   String
}

model OTP {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Chat {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  role      String
  content   String
  createdAt DateTime @default(now())
}

model StudyProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  subjects      String[]
  gradeLevel    String
  learningStyle String
  goals         String
}

model QuizProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  subjects        String[]
  difficultyLevel String
  quizFormat      String
  timePreference  String
}

model VectorEmbedding {
  id        String   @id @default(cuid())
  content   String
  embedding Float[]
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}